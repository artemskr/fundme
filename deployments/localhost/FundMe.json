{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NeedToSpendMoreETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FundMe__WithdrawCallFailed",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3b29c18b63ba7509491151acc772e1d8e9c51a7e236da85cd1cede81e6d86bb2",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1076035",
    "logsBloom": "0x
    "blockHash": "0x8330e7b54a19e857cef5244e6230d55dff780e1d20c5415c7b8ed0378c2feac0",
    "transactionHash": "0x3b29c18b63ba7509491151acc772e1d8e9c51a7e236da85cd1cede81e6d86bb2",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1076035",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "ccaa2298a7c6da979cf741cc7c026717",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NeedToSpendMoreETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__WithdrawCallFailed\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Patric Collins\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo sample funcding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\nerror FundMe__NeedToSpendMoreETH();\\nerror FundMe__WithdrawCallFailed();\\n\\n/**\\n * @title A contract for crowd funding\\n * @author Patric Collins\\n * @notice This contract is to demo sample funcding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address s_priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        if (msg.value > 0) {\\n            fund();\\n        }\\n    }\\n\\n    fallback() external payable {\\n        if (msg.value > 0) {\\n            fund();\\n        }\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        // require(\\n        //     msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n        //     \\\"You need to spend more ETH!\\\"\\n        // );\\n        if (msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) {\\n            revert FundMe__NeedToSpendMoreETH();\\n        }\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex = 0; funderIndex < s_funders.length; funderIndex++) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        // require(callSuccess, \\\"Call failed\\\");\\n        if (!callSuccess) {\\n            revert FundMe__WithdrawCallFailed();\\n        }\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mapping can't be in memory\\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x33fdde196400a4622821370239134106de48d2fd7e27211d5023b81cb21193aa\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Goerli ETH / USD Address\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xa750d197a0da9a2ca1d9550268e7a6fc8bf41d71a86d814fe616e78c93ad3b91\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200139838038062001398833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6112196200017f6000396000818161042a0152818161067001526106c001526112196000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101615780639e87a5cd1461018c578063b60d4288146101b7578063be2693f0146101c1578063d7b4750c146101cb576100a3565b80630343fb25146100b75780630d8e6e2c146100f45780633ccfd60b1461011f5780636b69a59214610136576100a3565b366100a35760003411156100a1576100a0610208565b5b005b60003411156100b5576100b4610208565b5b005b3480156100c357600080fd5b506100de60048036038101906100d99190610b90565b610339565b6040516100eb9190610bd6565b60405180910390f35b34801561010057600080fd5b50610109610381565b6040516101169190610bd6565b60405180910390f35b34801561012b57600080fd5b50610134610428565b005b34801561014257600080fd5b5061014b61065f565b6040516101589190610bd6565b60405180910390f35b34801561016d57600080fd5b5061017661066c565b6040516101839190610c00565b60405180910390f35b34801561019857600080fd5b506101a1610694565b6040516101ae9190610c7a565b60405180910390f35b6101bf610208565b005b6101c96106be565b005b3480156101d757600080fd5b506101f260048036038101906101ed9190610cc1565b610962565b6040516101ff9190610c00565b60405180910390f35b6802b5e3af16b1880000610247600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109aa90919063ffffffff16565b101561027f576040517fb8cca71b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cd9190610d1d565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610d88565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ad576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610558576000600182815481106104d3576104d2610db5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061055090610de4565b9150506104b0565b50600067ffffffffffffffff81111561057457610573610e2d565b5b6040519080825280602002602001820160405280156105a25781602001602082028036833780820191505090505b50600190805190602001906105b8929190610a86565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105df90610e8d565b60006040518083038185875af1925050503d806000811461061c576040519150601f19603f3d011682016040523d82523d6000602084013e610621565b606091505b505090508061065c576040517fbeccced600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610743576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161077d575b5050505050905060005b81518110156108515760008282815181106107ef576107ee610db5565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084990610de4565b9150506107d1565b50600067ffffffffffffffff81111561086d5761086c610e2d565b5b60405190808252806020026020018201604052801561089b5781602001602082028036833780820191505090505b50600190805190602001906108b1929190610a86565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108d890610e8d565b60006040518083038185875af1925050503d8060008114610915576040519150601f19603f3d011682016040523d82523d6000602084013e61091a565b606091505b505090508061095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095590610eff565b60405180910390fd5b5050565b60006001828154811061097857610977610db5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109b6836109e6565b90506000670de0b6b3a764000085836109cf9190610f1f565b6109d99190610fa8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a679190611051565b5050509150506402540be40081610a7e91906110cc565b915050919050565b828054828255906000526020600020908101928215610aff579160200282015b82811115610afe5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aa6565b5b509050610b0c9190610b10565b5090565b5b80821115610b29576000816000905550600101610b11565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5d82610b32565b9050919050565b610b6d81610b52565b8114610b7857600080fd5b50565b600081359050610b8a81610b64565b92915050565b600060208284031215610ba657610ba5610b2d565b5b6000610bb484828501610b7b565b91505092915050565b6000819050919050565b610bd081610bbd565b82525050565b6000602082019050610beb6000830184610bc7565b92915050565b610bfa81610b52565b82525050565b6000602082019050610c156000830184610bf1565b92915050565b6000819050919050565b6000610c40610c3b610c3684610b32565b610c1b565b610b32565b9050919050565b6000610c5282610c25565b9050919050565b6000610c6482610c47565b9050919050565b610c7481610c59565b82525050565b6000602082019050610c8f6000830184610c6b565b92915050565b610c9e81610bbd565b8114610ca957600080fd5b50565b600081359050610cbb81610c95565b92915050565b600060208284031215610cd757610cd6610b2d565b5b6000610ce584828501610cac565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2882610bbd565b9150610d3383610bbd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d6857610d67610cee565b5b828201905092915050565b600081519050610d8281610c95565b92915050565b600060208284031215610d9e57610d9d610b2d565b5b6000610dac84828501610d73565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610def82610bbd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e2257610e21610cee565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e77600083610e5c565b9150610e8282610e67565b600082019050919050565b6000610e9882610e6a565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ee9600b83610ea2565b9150610ef482610eb3565b602082019050919050565b60006020820190508181036000830152610f1881610edc565b9050919050565b6000610f2a82610bbd565b9150610f3583610bbd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f6e57610f6d610cee565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fb382610bbd565b9150610fbe83610bbd565b925082610fce57610fcd610f79565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ff881610fd9565b811461100357600080fd5b50565b60008151905061101581610fef565b92915050565b6000819050919050565b61102e8161101b565b811461103957600080fd5b50565b60008151905061104b81611025565b92915050565b600080600080600060a0868803121561106d5761106c610b2d565b5b600061107b88828901611006565b955050602061108c8882890161103c565b945050604061109d88828901610d73565b93505060606110ae88828901610d73565b92505060806110bf88828901611006565b9150509295509295909350565b60006110d78261101b565b91506110e28361101b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561112157611120610cee565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561115e5761115d610cee565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561119b5761119a610cee565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111d8576111d7610cee565b5b82820290509291505056fea264697066735822122052580491b9a63a708975573ee7f6fe8ac90843b8baff7c92f9217a58d00b19aa64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101615780639e87a5cd1461018c578063b60d4288146101b7578063be2693f0146101c1578063d7b4750c146101cb576100a3565b80630343fb25146100b75780630d8e6e2c146100f45780633ccfd60b1461011f5780636b69a59214610136576100a3565b366100a35760003411156100a1576100a0610208565b5b005b60003411156100b5576100b4610208565b5b005b3480156100c357600080fd5b506100de60048036038101906100d99190610b90565b610339565b6040516100eb9190610bd6565b60405180910390f35b34801561010057600080fd5b50610109610381565b6040516101169190610bd6565b60405180910390f35b34801561012b57600080fd5b50610134610428565b005b34801561014257600080fd5b5061014b61065f565b6040516101589190610bd6565b60405180910390f35b34801561016d57600080fd5b5061017661066c565b6040516101839190610c00565b60405180910390f35b34801561019857600080fd5b506101a1610694565b6040516101ae9190610c7a565b60405180910390f35b6101bf610208565b005b6101c96106be565b005b3480156101d757600080fd5b506101f260048036038101906101ed9190610cc1565b610962565b6040516101ff9190610c00565b60405180910390f35b6802b5e3af16b1880000610247600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109aa90919063ffffffff16565b101561027f576040517fb8cca71b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cd9190610d1d565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103eb57600080fd5b505afa1580156103ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104239190610d88565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104ad576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610558576000600182815481106104d3576104d2610db5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061055090610de4565b9150506104b0565b50600067ffffffffffffffff81111561057457610573610e2d565b5b6040519080825280602002602001820160405280156105a25781602001602082028036833780820191505090505b50600190805190602001906105b8929190610a86565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105df90610e8d565b60006040518083038185875af1925050503d806000811461061c576040519150601f19603f3d011682016040523d82523d6000602084013e610621565b606091505b505090508061065c576040517fbeccced600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610743576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161077d575b5050505050905060005b81518110156108515760008282815181106107ef576107ee610db5565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084990610de4565b9150506107d1565b50600067ffffffffffffffff81111561086d5761086c610e2d565b5b60405190808252806020026020018201604052801561089b5781602001602082028036833780820191505090505b50600190805190602001906108b1929190610a86565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108d890610e8d565b60006040518083038185875af1925050503d8060008114610915576040519150601f19603f3d011682016040523d82523d6000602084013e61091a565b606091505b505090508061095e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095590610eff565b60405180910390fd5b5050565b60006001828154811061097857610977610db5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109b6836109e6565b90506000670de0b6b3a764000085836109cf9190610f1f565b6109d99190610fa8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a679190611051565b5050509150506402540be40081610a7e91906110cc565b915050919050565b828054828255906000526020600020908101928215610aff579160200282015b82811115610afe5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aa6565b5b509050610b0c9190610b10565b5090565b5b80821115610b29576000816000905550600101610b11565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5d82610b32565b9050919050565b610b6d81610b52565b8114610b7857600080fd5b50565b600081359050610b8a81610b64565b92915050565b600060208284031215610ba657610ba5610b2d565b5b6000610bb484828501610b7b565b91505092915050565b6000819050919050565b610bd081610bbd565b82525050565b6000602082019050610beb6000830184610bc7565b92915050565b610bfa81610b52565b82525050565b6000602082019050610c156000830184610bf1565b92915050565b6000819050919050565b6000610c40610c3b610c3684610b32565b610c1b565b610b32565b9050919050565b6000610c5282610c25565b9050919050565b6000610c6482610c47565b9050919050565b610c7481610c59565b82525050565b6000602082019050610c8f6000830184610c6b565b92915050565b610c9e81610bbd565b8114610ca957600080fd5b50565b600081359050610cbb81610c95565b92915050565b600060208284031215610cd757610cd6610b2d565b5b6000610ce584828501610cac565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2882610bbd565b9150610d3383610bbd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d6857610d67610cee565b5b828201905092915050565b600081519050610d8281610c95565b92915050565b600060208284031215610d9e57610d9d610b2d565b5b6000610dac84828501610d73565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610def82610bbd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e2257610e21610cee565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e77600083610e5c565b9150610e8282610e67565b600082019050919050565b6000610e9882610e6a565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ee9600b83610ea2565b9150610ef482610eb3565b602082019050919050565b60006020820190508181036000830152610f1881610edc565b9050919050565b6000610f2a82610bbd565b9150610f3583610bbd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610f6e57610f6d610cee565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fb382610bbd565b9150610fbe83610bbd565b925082610fce57610fcd610f79565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ff881610fd9565b811461100357600080fd5b50565b60008151905061101581610fef565b92915050565b6000819050919050565b61102e8161101b565b811461103957600080fd5b50565b60008151905061104b81611025565b92915050565b600080600080600060a0868803121561106d5761106c610b2d565b5b600061107b88828901611006565b955050602061108c8882890161103c565b945050604061109d88828901610d73565b93505060606110ae88828901610d73565b92505060806110bf88828901611006565b9150509295509295909350565b60006110d78261101b565b91506110e28361101b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561112157611120610cee565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561115e5761115d610cee565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561119b5761119a610cee565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156111d8576111d7610cee565b5b82820290509291505056fea264697066735822122052580491b9a63a708975573ee7f6fe8ac90843b8baff7c92f9217a58d00b19aa64736f6c63430008080033",
  "devdoc": {
    "author": "Patric Collins",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo sample funcding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 78,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}